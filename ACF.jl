using Plots
using Distributions
using Random

Random.seed!(1234)


# 1) Find corr between random numbers generated by Julia lang
# 2) find corr between rd numbers generated by Logistic Map at r=4


function mean(data)
    return sum(data)/(size(data)[1])
end

# function auto_cov_func(data, k) #auto_covariance function calculated at lag k. data should be in array/Vector format
#     if k < 0
#         return 1
#     else
#         n = size(data)[1]
#         u = mean(data)
#         temp = ( data[1:n-k] .- u .*ones(n-k) ) .*( data[k+1:n] .- u .*ones(n-k) )
#         return sum(temp/n)
#     end
# end

function auto_cov_func_opt(data, k) #auto_covariance function calculated at lag k. data should be in array/Vector format
    if k < 0
        return 1
    else
        n = size(data)[1]
        u = mean(data)
        
        sk = 0
        
        for i=1:n-k
            sk += (data[i] - u)*(data[k+i]-u)     
        end
        
        #temp = ( data[1:n-k] .- u .*ones(n-k) ) .*( data[k+1:n] .- u .*ones(n-k) )
        
        return sk/n
    end
end


function ACF(data,k)
    if k<0
        return 1
    else
        return auto_cov_func_opt(data,k) / auto_cov_func_opt(data,0)

    end
end

function return_acf_vals(data)
    n = size(data)[1]
    return [ACF(data,i) for i=1:n]
end

# function return_acf_vals_loop(data)
#     n = size(data)[1]
#     temp = zeros(n)
#     for i=1:n
#         temp[i] = ACF(data,i)
#     end
#     return #[ACF(data,i) for i=1:n]
# end



x = Uniform(0,1)

data2 = rand(x,4*(10^4))

@time return_acf_vals_loop(data2)

@time return_acf_vals(data2)

acf_vals = return_acf_vals(data2)

n_range = 1:size(acf_vals)[1]

scatter(n_range,acf_vals)

savefig("ACF_plot.png")


##########################################################

p = 0:0.01:100
p_sin = sin.(p .-50*ones(size(p)[1]))

plot(p,return_acf_vals(p_sin))

##########################################################



